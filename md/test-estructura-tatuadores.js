// Script para verificar la estructura de la tabla tatuadores
// Ejecutar con: node test-estructura-tatuadores.js

require('dotenv').config();
const mysql = require('mysql2/promise');

async function verificarEstructura() {
  let connection;
  
  try {
    // Crear conexi√≥n
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'skincodeia'
    });

    console.log('‚úÖ Conectado a la base de datos\n');

    // Obtener estructura de la tabla
    const [columns] = await connection.execute(`
      DESCRIBE tatuadores
    `);

    console.log('üìã ESTRUCTURA DE LA TABLA TATUADORES:\n');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Campo               ‚îÇ Tipo         ‚îÇ Null ‚îÇ Key ‚îÇ Default     ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    columns.forEach(col => {
      const field = col.Field.padEnd(19);
      const type = col.Type.padEnd(12);
      const nullVal = col.Null.padEnd(4);
      const key = col.Key.padEnd(3);
      const def = (col.Default || 'NULL').toString().padEnd(11);
      console.log(`‚îÇ ${field} ‚îÇ ${type} ‚îÇ ${nullVal} ‚îÇ ${key} ‚îÇ ${def} ‚îÇ`);
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

    // Verificar campos espec√≠ficos
    const camposBio = columns.filter(col => col.Field === 'bio');
    const camposCreado = columns.filter(col => col.Field === 'creado_en');

    console.log('üîç VERIFICACI√ìN DE CAMPOS:\n');
    console.log(`   Campo 'bio':       ${camposBio.length > 0 ? '‚úÖ EXISTE' : '‚ùå NO EXISTE'}`);
    console.log(`   Campo 'creado_en': ${camposCreado.length > 0 ? '‚úÖ EXISTE' : '‚ùå NO EXISTE'}\n`);

    // Contar registros
    const [count] = await connection.execute('SELECT COUNT(*) as total FROM tatuadores');
    console.log(`üìä Total de tatuadores registrados: ${count[0].total}\n`);

    // Si hay registros, mostrar uno de ejemplo
    if (count[0].total > 0) {
      const [sample] = await connection.execute('SELECT * FROM tatuadores LIMIT 1');
      console.log('üìÑ EJEMPLO DE REGISTRO:\n');
      console.log(JSON.stringify(sample[0], null, 2));
      console.log('');
    }

    // Recomendaci√≥n
    console.log('üí° RECOMENDACI√ìN:\n');
    if (camposBio.length === 0) {
      console.log('   El campo "bio" NO existe en tu tabla.');
      console.log('   Opciones:');
      console.log('   1. Agregar el campo ejecutando:');
      console.log('      ALTER TABLE tatuadores ADD COLUMN bio TEXT NULL AFTER especialidad;');
      console.log('   2. Usar el c√≥digo actual que ya est√° corregido SIN el campo bio ‚úÖ');
    } else {
      console.log('   El campo "bio" S√ç existe en tu tabla.');
      console.log('   El c√≥digo puede usar este campo para biograf√≠as de tatuadores.');
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    
    if (error.code === 'ER_NO_SUCH_TABLE') {
      console.log('\n‚ö†Ô∏è  La tabla "tatuadores" no existe.');
      console.log('   Ejecuta el script database/skincodeia.sql para crearla.');
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('\n‚úÖ Conexi√≥n cerrada');
    }
  }
}

// Ejecutar
verificarEstructura();
